// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoomieFinderInfrastructure.Data;

#nullable disable

namespace RoomieFinderInfrastructure.Migrations
{
    [DbContext(typeof(RoomieFinderDbContext))]
    [Migration("20240721101851_qualitySeeding")]
    partial class qualitySeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1d9ae291-1067-4ec5-9f2b-ad0ea4bd8b0e",
                            Name = "GreatAdmin",
                            NormalizedName = "GREATADMIN"
                        },
                        new
                        {
                            Id = "7ed277c0-8163-466a-ad9b-942646c198c7",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "77cc9efa-570e-464c-a3c3-805a1cf94b30",
                            RoleId = "1d9ae291-1067-4ec5-9f2b-ad0ea4bd8b0e"
                        },
                        new
                        {
                            UserId = "169f682a-e6d0-4aca-8b74-d51dbcaa58ef",
                            RoleId = "1d9ae291-1067-4ec5-9f2b-ad0ea4bd8b0e"
                        },
                        new
                        {
                            UserId = "51d96dfa-943a-44a3-a39b-136844852055",
                            RoleId = "7ed277c0-8163-466a-ad9b-942646c198c7"
                        },
                        new
                        {
                            UserId = "88273e30-0ad0-4095-b288-51f0d4f2eba0",
                            RoleId = "7ed277c0-8163-466a-ad9b-942646c198c7"
                        },
                        new
                        {
                            UserId = "47ca66e3-a4b0-43ca-916a-edf44842f9f7",
                            RoleId = "7ed277c0-8163-466a-ad9b-942646c198c7"
                        },
                        new
                        {
                            UserId = "cc3beb38-92d0-44b9-9470-d24ffe951850",
                            RoleId = "7ed277c0-8163-466a-ad9b-942646c198c7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.AnswerSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifyer of each answersheet");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("GoesToSleepEarly")
                        .HasColumnType("bit")
                        .HasComment("Boolean value which depicts if the student goes to sleep early");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit")
                        .HasComment("Describes if an answer sheet can be filled out by students");

                    b.Property<bool>("IsIntrovert")
                        .HasColumnType("bit")
                        .HasComment("Boolean value which shows the preferred room atmosphere");

                    b.Property<bool>("IsMessy")
                        .HasColumnType("bit")
                        .HasComment("Boolean value which shows if the student prefers a messy/tidy roomate");

                    b.Property<bool>("LikesQuietness")
                        .HasColumnType("bit")
                        .HasComment("Boolean value which depicts if the student prefers a quiet atmpshere");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("the identifyer of the student whose answers are this");

                    b.Property<bool>("WakesUpEarly")
                        .HasColumnType("bit")
                        .HasComment("Boolean value which depicts if the student prefers to wake up early");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("AnswerSheets", t =>
                        {
                            t.HasComment("The test which holds the roomate questions students need to fill out");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GoesToSleepEarly = true,
                            IsEditable = true,
                            IsIntrovert = false,
                            IsMessy = true,
                            LikesQuietness = true,
                            StudentId = 1,
                            WakesUpEarly = false
                        },
                        new
                        {
                            Id = 2,
                            GoesToSleepEarly = true,
                            IsEditable = true,
                            IsIntrovert = false,
                            IsMessy = false,
                            LikesQuietness = false,
                            StudentId = 2,
                            WakesUpEarly = true
                        },
                        new
                        {
                            Id = 3,
                            GoesToSleepEarly = false,
                            IsEditable = true,
                            IsIntrovert = true,
                            IsMessy = true,
                            LikesQuietness = false,
                            StudentId = 3,
                            WakesUpEarly = false
                        },
                        new
                        {
                            Id = 4,
                            GoesToSleepEarly = false,
                            IsEditable = true,
                            IsIntrovert = false,
                            IsMessy = true,
                            LikesQuietness = false,
                            StudentId = 4,
                            WakesUpEarly = true
                        });
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The first name of each user");

                    b.Property<bool>("HasChangedPassword")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("The last name of a user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("The user of the application");
                        });

                    b.HasData(
                        new
                        {
                            Id = "77cc9efa-570e-464c-a3c3-805a1cf94b30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3edfa50-db4e-49b2-af7b-43ebdb91da38",
                            Email = "sofia_university_admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sofia University",
                            HasChangedPassword = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIA_UNIVERSITY_ADMIN@GMAIL.COM",
                            NormalizedUserName = "SOFIA UNIVERSITY ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDXnp5OisLGFC4/4Q8FykD6KzKKM8IBmq39AlKv5+7k+9QnkhMFeFX+qXwkL+CqeQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0484b93-8f85-4955-a24a-aa78ef648131",
                            TwoFactorEnabled = false,
                            UserName = "Sofia University Admin"
                        },
                        new
                        {
                            Id = "169f682a-e6d0-4aca-8b74-d51dbcaa58ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6fbd328-5698-4a4e-a978-60645d852184",
                            Email = "medical_university_admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Medical University",
                            HasChangedPassword = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEDICAL_UNIVERSITY_ADMIN@GMAIL.COM",
                            NormalizedUserName = "MEDICAL UNIVERSITY ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECkmsIlJada6p4qaIvuqAeVPuqEo70wC7++/xJpsw0H6kFmdRPZy+Pf9TaLvmLtZXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9bbe24de-01b8-48d0-b3e5-2cae8e9b39b2",
                            TwoFactorEnabled = false,
                            UserName = "Medical University Admin"
                        },
                        new
                        {
                            Id = "51d96dfa-943a-44a3-a39b-136844852055",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82f29695-6527-4167-848b-304606a57186",
                            Email = "alisa_markova@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alisa",
                            HasChangedPassword = true,
                            LastName = "Markova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALISA_MARKOVA@GMAIL.COM",
                            NormalizedUserName = "ALISE_MARIE",
                            PasswordHash = "AQAAAAIAAYagAAAAECvwzOg9i/RtC1mxC69l++/P+mRE1V7sFUb3rCpBsERHgnVeHbQItzEB0jGyWhXKIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57b6fcbe-b6f7-4ae3-810b-8397df19d7c3",
                            TwoFactorEnabled = false,
                            UserName = "Alise_Marie"
                        },
                        new
                        {
                            Id = "88273e30-0ad0-4095-b288-51f0d4f2eba0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5515ce5-fa1b-4db2-afde-ab11d6fc6e2b",
                            Email = "niki_g@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nikolay",
                            HasChangedPassword = true,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKI_G@GMAIL.COM",
                            NormalizedUserName = "NIKK",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ6ghXOe9LHb6qYzz5tVOoJxhB0ofzP+ioXM13ZAS07lmWy9YfI+g7QoXnkajhc3Kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cebfdc09-298a-4004-97b6-f964c4260d94",
                            TwoFactorEnabled = false,
                            UserName = "Nikk"
                        },
                        new
                        {
                            Id = "47ca66e3-a4b0-43ca-916a-edf44842f9f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e648b48b-82df-48e7-acb5-4fe0d7f5585e",
                            Email = "marina_nikolova.56@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Marina",
                            HasChangedPassword = true,
                            LastName = "Nikolova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARINA_NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "MARINA_",
                            PasswordHash = "AQAAAAIAAYagAAAAEIodw1MPhSsgo9VKAnZhKNrlt00+X4LCLxE1LYD/IUbJZNe3yM6Q1xq0npzhRlI2/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f075c32e-8b60-4b8c-9407-d64d6f5be393",
                            TwoFactorEnabled = false,
                            UserName = "Marina_"
                        },
                        new
                        {
                            Id = "cc3beb38-92d0-44b9-9470-d24ffe951850",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81ea8256-d7a3-4850-964e-df2651d4b64d",
                            Email = "pepi_p@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            HasChangedPassword = true,
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEPI_P@GMAIL.COM",
                            NormalizedUserName = "_PEPI",
                            PasswordHash = "AQAAAAIAAYagAAAAEH/ntxW25jNkGOsda5Vyll91X7EGtJ6eFVhq1V5oRQEqMZ/n1mGJmanwPaSS5DUmCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6493de99-6e8a-467b-b8fa-919be366e752",
                            TwoFactorEnabled = false,
                            UserName = "_Pepi"
                        });
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.BlacklistedToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedTokens");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Dormitory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifyer of each dormitory");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the dormitory");

                    b.HasKey("Id");

                    b.ToTable("Dormitories", t =>
                        {
                            t.HasComment("Dormitory is the place where students live");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First dormitory"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Second dormitory"
                        });
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Quality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifyer for a quality");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of quality");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Artistic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Social"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Video Gamer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Liberal"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Conservative"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Music lover"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bookworm"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Adventurer"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Studious"
                        });
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifyer for a request");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Additional comment toward the request");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int")
                        .HasComment("Shows the sttaus of the request- pending, archived, accepted or declined");

                    b.Property<int>("RequestType")
                        .HasColumnType("int")
                        .HasComment("Shows the the of the request- can be for a single room, sepcific/different roomate");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("the identifyer of the student who made the request");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Requests", t =>
                        {
                            t.HasComment("A request made by a student connected with rooms and roomates");
                        });
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifyer of a room in the database");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DormitoryId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingCapacity")
                        .HasColumnType("int")
                        .HasComment("Shows the remaining empty spots for a room, set to 0 when the room is full");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasComment("The room number is its identifyer in the dormitory");

                    b.Property<int>("RoomType")
                        .HasColumnType("int")
                        .HasComment("Room type, can be single, duplex, apartament");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasComment("Room in dormitory");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DormitoryId = 1,
                            RemainingCapacity = 2,
                            RoomNumber = 101,
                            RoomType = 2
                        },
                        new
                        {
                            Id = 2,
                            DormitoryId = 1,
                            RemainingCapacity = 2,
                            RoomNumber = 102,
                            RoomType = 2
                        },
                        new
                        {
                            Id = 3,
                            DormitoryId = 1,
                            RemainingCapacity = 4,
                            RoomNumber = 204,
                            RoomType = 3
                        },
                        new
                        {
                            Id = 4,
                            DormitoryId = 1,
                            RemainingCapacity = 4,
                            RoomNumber = 205,
                            RoomType = 3
                        },
                        new
                        {
                            Id = 5,
                            DormitoryId = 1,
                            RemainingCapacity = 4,
                            RoomNumber = 307,
                            RoomType = 3
                        },
                        new
                        {
                            Id = 6,
                            DormitoryId = 2,
                            RemainingCapacity = 1,
                            RoomNumber = 101,
                            RoomType = 1
                        },
                        new
                        {
                            Id = 7,
                            DormitoryId = 2,
                            RemainingCapacity = 1,
                            RoomNumber = 102,
                            RoomType = 1
                        },
                        new
                        {
                            Id = 8,
                            DormitoryId = 2,
                            RemainingCapacity = 2,
                            RoomNumber = 208,
                            RoomType = 2
                        },
                        new
                        {
                            Id = 9,
                            DormitoryId = 2,
                            RemainingCapacity = 4,
                            RoomNumber = 209,
                            RoomType = 3
                        },
                        new
                        {
                            Id = 10,
                            DormitoryId = 2,
                            RemainingCapacity = 1,
                            RoomNumber = 301,
                            RoomType = 1
                        },
                        new
                        {
                            Id = 11,
                            DormitoryId = 2,
                            RemainingCapacity = 1,
                            RoomNumber = 302,
                            RoomType = 1
                        });
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The unique identifyer for each student");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("AnswerSheetId")
                        .HasColumnType("int")
                        .HasComment("The unique identifyer leading to the student's answers");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasGraduated")
                        .HasColumnType("bit")
                        .HasComment("Shows if a student has graduated, graduated students cannot use the application");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit")
                        .HasComment("An indicator to the gender of a student");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("YearAtUniversity")
                        .HasColumnType("int")
                        .HasComment("Year of attending the university");

                    b.HasKey("StudentId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            ApplicationUserId = "51d96dfa-943a-44a3-a39b-136844852055",
                            HasGraduated = false,
                            IsMale = false,
                            YearAtUniversity = 1
                        },
                        new
                        {
                            StudentId = 2,
                            ApplicationUserId = "88273e30-0ad0-4095-b288-51f0d4f2eba0",
                            HasGraduated = false,
                            IsMale = true,
                            YearAtUniversity = 1
                        },
                        new
                        {
                            StudentId = 3,
                            ApplicationUserId = "47ca66e3-a4b0-43ca-916a-edf44842f9f7",
                            HasGraduated = false,
                            IsMale = false,
                            YearAtUniversity = 2
                        },
                        new
                        {
                            StudentId = 4,
                            ApplicationUserId = "cc3beb38-92d0-44b9-9470-d24ffe951850",
                            HasGraduated = false,
                            IsMale = true,
                            YearAtUniversity = 3
                        });
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.StudentQualities", b =>
                {
                    b.Property<int>("QualityId")
                        .HasColumnType("int")
                        .HasComment("The interest id picked by the student, part of composite key");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("The student id who has picked the interest, part of composite key");

                    b.HasKey("QualityId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsQualities", t =>
                        {
                            t.HasComment("All of the student interests used to make better roomate matches");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoomieFinderInfrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.AnswerSheet", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.Student", "Student")
                        .WithOne("AnswerSheet")
                        .HasForeignKey("RoomieFinderInfrastructure.Models.AnswerSheet", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Request", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.Student", "Student")
                        .WithMany("Requests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Room", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.Dormitory", "Dormitory")
                        .WithMany("Rooms")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dormitory");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Student", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("RoomieFinderInfrastructure.Models.Student", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoomieFinderInfrastructure.Models.Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.StudentQualities", b =>
                {
                    b.HasOne("RoomieFinderInfrastructure.Models.Quality", "Quality")
                        .WithMany("StudentsQualities")
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoomieFinderInfrastructure.Models.Student", "Student")
                        .WithMany("StudentQualities")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quality");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.ApplicationUser", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Dormitory", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Quality", b =>
                {
                    b.Navigation("StudentsQualities");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Room", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("RoomieFinderInfrastructure.Models.Student", b =>
                {
                    b.Navigation("AnswerSheet");

                    b.Navigation("Requests");

                    b.Navigation("StudentQualities");
                });
#pragma warning restore 612, 618
        }
    }
}
